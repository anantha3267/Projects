ScoreMe Solutions - Gurugram

Dora metrics
how to reducwe docker image size
How do u create aws db for high performance and give to app teams
Private link
Alb nlb 
where does infrastructure is compared? terraform plan
unzip files in dockerfile
add vs copy
docker networking
jenkins arch
k8s arch
docker arch
s3 lifecycle
s3 bucket versioning how to do
entry point vs cmd
how container to container is communicated in k8s
k8s and docker networking
kube proxy
metadata in ec2
load balancer in k8s 
nginx as a web server how to deploy
nginx as a load balancer
how credentials are managed in jenkins or github actions
forward and reverse proxy


==============================================================

1.     How to overcome conflicts in Git?
2.     If there is suddenly the file is deleted in git how do you get it back? 
3.     What are git merge and git stash, git rebase, git fetch?
4.     Can you increase the size of the root volume without shutting down the instance?
5.     Difference between Classic ELB and Application ELB?
6.     Are you only using cloud watch for monitoring?
7.     How to configure VPC peering?
8.     can you write docker file where Linux env condition deploy static webserver
9.     Is it possible to run any VM in AWS without creating any EC2 instance?
10. What are the Terraform modules? Have used any modules in the project?
11. What are services in Kubernetes?
12. What are the key operations in Terraform?
13. What happens when you delete /var/lib/docker/overlay?
14. Tell all the scenarios too implement the security in Kubernetes.
15. Your EKS application is experiencing higher than expected traffic. How would you automatically scale the Pods?
16. What is Continuous Delivery & Continuous Deployment?
17. Your team needs to be alerted when the CPU usage of any Pod in your EKS cluster exceeds 80% for more than 5 minutes. How would you set this up?
18. As a DevOps engineer why do we use Jira Tool?

===========================================================
How do you handle state drift using a terraform plan and state validation?
How do you fix issues when someone makes manual changes in the cloud?
How do you use state locking to prevent multiple people from making changes simultaneously?
How do you import existing resources into Terraform state?

How do you prevent accidental deletion of important resources?
How do you use the -target flag to make specific, safe changes?
How do you set up proper backups of your Terraform state files?
How do you handle emergency changes safely?

How do modules help create reusable infrastructure code?
How do workspaces help manage different environments (dev, staging, prod)?
How do you share data between different Terraform configurations?
How do you organize large Terraform projects?

When do you use count vs for_each for creating multiple resources?
How do you manage dependencies between resources?
How do you use dynamic blocks for repeated configurations?
How do you handle sensitive data and secrets properly?
=====================================================================
Project & Responsibilities: 
What is the project that you're working on currently and your roles and responsibilities?
 What are the cloud services that you've worked on?
 What specific tools have you used apart from legacy DevOps tools to integrate microservices while building a 3-tier application?
 
🔄 CI/CD & Infrastructure as Code: 
Explain the complete process of implementing a CI/CD Pipeline in your organization.
 How do you modularize a Terraform configuration? 
Write a Terraform file using for_each that takes values from two different AMIs and creates two instances.
 
☁️ Cloud & High Availability: 
How do you ensure high availability for your application? 
What monitoring tools have you used?
 How do you monitor cluster metrics in Kubernetes?
 How do you integrate Prometheus and Grafana to extract metrics from cluster?

 🛠 Kubernetes, Docker, and Scripting:
 How do you connect to a Kubernetes cluster from your local machine? 
What are the states of a Pod, and how do you handle a Pod failure during deployment?
 Which CLI command is used to switch between Kubernetes clusters?
 How did you use Helm charts in Kubernetes? What are the best practices to reduce the size of a Docker image?
 List all the Docker commands you are familiar with. Write a simple Dockerfile. 

🖥 Linux & Scripting: 
What are the day-to-day commands you use in Linux, and what is the significance of netstat -tuln? 
Which command is used to synchronize two servers? 
How comfortable are you with Bash scripting? When do you use Python vs. Bash?
 Write a Python script that parses a JSON file, extracts the 3rd block, and gives it as input to another script. 
What is the difference between lists and tuples in Python?
 
📊 Databases and Advanced Cloud Services: What kinds of databases have you worked on?
 Are you aware of Redshift, and can you explain how it works? 
==========================================================================================
𝐊𝐮𝐛𝐞𝐫𝐧𝐞𝐭𝐞𝐬:- 𝘀𝗰𝗲𝗻𝗮𝗿𝗶𝗼-𝗯𝗮𝘀𝗲𝗱 𝗶𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄 𝗾𝘂𝗲𝘀𝘁𝗶𝗼𝗻 𝗮𝗻𝗱 𝗮𝗻𝘀𝘄𝗲𝗿.


𝗦𝗰𝗲𝗻𝗮𝗿𝗶𝗼: 𝐇𝐢𝐠𝐡 𝐏𝐨𝐝 𝐋𝐚𝐭𝐞𝐧𝐜𝐲:

𝗤𝘂𝗲𝘀𝘁𝗶𝗼𝗻𝘀:
Your application is deployed in Kubernetes, but users report high latency. How would you troubleshoot and resolve the issue?

𝗔𝗻𝘀𝘄𝗲𝗿: 
👉 𝗩𝗲𝗿𝗶𝗳𝘆 𝗥𝗲𝘀𝗼𝘂𝗿𝗰𝗲 𝗟𝗶𝗺𝗶𝘁𝘀: Check if the pods are hitting resource limits using and Look for throttling messages under CPU or memory.
💻 kubectl describe pod <pod-name>

👉 𝗠𝗼𝗻𝗶𝘁𝗼𝗿 𝗠𝗲𝘁𝗿𝗶𝗰𝘀: Use tools like Prometheus and Grafana to analyze CPU, memory, and network usage trends.

👉 𝗖𝗵𝗲𝗰𝗸 𝗟𝗼𝗴𝘀: Inspect pod logs for application-specific errors:
💻 kubectl logs <pod-name>

👉 𝗥𝗲𝘃𝗶𝗲𝘄 𝗡𝗲𝘁𝘄𝗼𝗿𝗸𝗶𝗻𝗴: Ensure there are no issues in network policies or services:
💻 kubectl describe svc <service-name>

👉 𝗛𝗼𝗿𝗶𝘇𝗼𝗻𝘁𝗮𝗹 𝗣𝗼𝗱 𝗔𝘂𝘁𝗼𝘀𝗰𝗮𝗹𝗶𝗻𝗴: If resource constraints are evident, scale the deployment:
💻 kubectl autoscale deployment <deployment-name> --cpu-percent=80 --min=2 --max=10

👉 𝗖𝗹𝘂𝘀𝘁𝗲𝗿 𝗡𝗼𝗱𝗲 𝗛𝗲𝗮𝗹𝘁𝗵: Check node status to ensure they are not overburdened:
💻 kubectl get nodes
=============================================================================
1. What would you do if an EC2 instance is getting slow?
2. If users can’t access an application hosted on EC2, what steps would you take?
3. What’s the difference between a Load Balancer and a Reverse Proxy?
4. How would you write a Terraform script to create an EC2 instance and run a script on every reboot?
5. What is a Backend in Terraform, and why is it used?
6. What is the Docker lifecycle?
7. What are the key Docker components?
8. What’s the difference between a Docker Image and a Docker Container?
9. What should you do before creating a Docker container?
10. What is Docker Compose, and how do you use it?
11. What steps would you take if you see an "unhealthy" status in an ELB?
12. How do you optimize Docker images for better performance?
13. How would you secure a Docker container?
14. What is Jenkins scaling, and how do you achieve it?
15. What is the role of the Master and Node in Jenkins?
16. What is a Sidecar container, and when would you use it?
17. What is the difference between ConfigMap and Secrets in Kubernetes?
18. What is the default deployment in Kubernetes?
19. What are Taints and Tolerations in Kubernetes?
20. What is a Static Pod in Kubernetes, and how is it different from a regular pod?
21. How do you check pod logs and attach Prometheus for monitoring?
22. How would you define a ConfigMap and Secrets in Kubernetes?
23. What is the default scaling in Kubernetes, and how does it work?
24. What is RBAC in Kubernetes, and why is it important?
25. What’s the difference between ClusterRole and Role in RBAC?
===================================================================================
Scenario based Interview Questions: 𝗦𝗲𝗿𝘃𝗶𝗰𝗲 𝗕𝗮𝘀𝗲𝗱 𝗠𝗡𝗖 🌟
 - 𝗗𝗲𝘃𝗢𝗽𝘀 𝗥𝗼𝗹𝗲
 - 𝗘𝘅𝗽 𝗥𝗮𝗻𝗴𝗲: 𝟯-𝟱 𝘆𝗿𝘀


📌𝗔𝗪𝗦 𝗦𝗰𝗲𝗻𝗮𝗿𝗶𝗼-𝗕𝗮𝘀𝗲𝗱 𝗤𝘂𝗲𝘀𝘁𝗶𝗼𝗻𝘀

1.Your team needs to deploy a web application across multiple regions for disaster recovery. How would you design the deployment to ensure minimal downtime during a regional failure?

2.A client’s application uses EC2 instances with EBS volumes, but they want to optimize storage costs. How would you identify and implement cost-saving measures?

3.An organization wants to centralize logs from multiple AWS accounts. How would you design a logging solution using AWS services?

4. How to secure sensitive environment variables for an ECS service that uses Fargate?

5.A real-time analytics application needs to process 1 TB of data daily. Which AWS services would you use to build an efficient pipeline, and why?

6.Your serverless application needs to connect to a MySQL database securely. What steps would you take to configure the connection?

📌𝗧𝗲𝗿𝗿𝗮𝗳𝗼𝗿𝗺

7. How to handle a requirement to deploy the same infrastructure across multiple AWS regions using Terraform?

8.Your team wants to enforce compliance policies for resources deployed with Terraform (eg. tagging). How would you achieve this?

9. During a terraform apply, a resource failed to provision, but others succeeded. How would you roll back changes while maintaining consistency?

10. You’re tasked with deploying resources for a temporary project using Terraform. How would you ensure easy cleanup after the project ends?

11. How would you prevent collaborators to accidentally overwriting each other’s changes. What strategies would you implement here?

12. A client requests a Terraform setup where they can provision only specific subsets of resources on demand. How would you design such a solution?
================================================================================================================
1.You are tasked with securing a Linux server that hosts a web application. The server is currently exposed to the internet and has a weak root password. Describe the steps you would take to secure the server.
2.Explain the concept of shift-lift in DevOps and how it enables teams to detect and fix issues earlier in the development cycle.
3.One of your team members accidentally ran a command that corrupted the file system on a critical Linux server. The server is no longer booting, and you need to recover the data. Walk through the steps you would take to recover the file system.
4.What happens when you delete the /var/lib/docker/overlay directory on a Docker host?
5.Your team is using Jenkins for continuous integration and continuous deployment (CI/CD). Describe the master-slave architecture of Jenkins and how it enables distributed builds and deployments.
6.Explain the difference between stopping and terminating an EC2 instance. Additionally, describe the concept of EC2 hibernation and how it enables instances to be restarted from a saved state.
7.You accidentally committed sensitive information to a Git repository. Describe the steps you would take to remove the sensitive information from the repository's history.
8.Explain the concept of a ReplicaSet in K8s and how it ensures that a specified number of replicas of a pod are running at any given time.
9.One of your team members accidentally deleted a critical branch in a Git repository. Describe the steps you would take to recover the deleted branch.
10.  Describe the lifecycle of a Docker container, including how it is created, started, stopped, and deleted.
11.  You are tasked with implementing a CI/CD pipeline from scratch for a web application. Describe the steps you would take to implement the pipeline, including how you would ensure zero downtime deployments and implement rollbacks.
12.  What is the difference between the ADD and COPY instructions in a Dockerfile?
13.  You are using Terraform to manage your infrastructure, and you notice that one of your resources is not being updated correctly. Describe how you would use Terraform's taint and untaint commands to resolve the issue. Additionally, explain the difference between stateful and stateless resources in Terraform.
14. Describe how to configure a NAT gateway in AWS to enable outbound internet access for instances in a private subnet.
15.Is it possible to run a virtual machine (VM) in AWS without creating an EC2 instance?
16.What is the difference between the origin and upstream remotes in a Git repository?
17.Your team uses a backup script to download the latest backup file from a remote server. However, the script is currently not working due to changes in the remote server's configuration. Write a script that downloads the latest backup file from the remote server using SSH.
likesupport
66
=============================================================================================================================
These 𝗦𝗰𝗲𝗻𝗮𝗿𝗶𝗼 𝗯𝗮𝘀𝗲𝗱 𝗤𝘂𝗲𝘀𝘁𝗶𝗼𝗻𝘀 covered a wide range of technical and behavioural topics. I am sharing some key questions that I faced during the interview:

1. 🗓️ What are your day-to-day activities in your current role? 
2. 🌐 Where is your current project hosted? 
3. ☁️ What AWS services have you worked with so far? 
4. 🔧 Do you have hands-on experience with AWS CloudFormation? 
5.🔄 Are you more proficient with CloudFormation or Terraform? 
6. 📊 Have you used Prometheus and Grafana in your projects? 
7. 📈 What activities are you currently involved with related to Prometheus? 
8. 🐳 Have you created a Dockerfile?
9. ⚙️ What CI/CD tools have you used in your projects? 
10.💻 Can you describe the flow when a developer commits code or raises a pull request? 
11. 🛠️ Where do you typically run your Dockerfiles? 
12. 🖼️ What is the difference between a Docker image and a container? 
13. 💡 If you create a 5GB Docker image but need to deploy it on an EC2 instance with only 2GB of RAM, what solutions or suggestions would you have? 
14. 🔨 When working with Terraform, do you typically create modules or scripts? 
15. 📝 What Terraform blocks have you written so far? 
16. 📚 Can you explain the different Terraform blocks you have used? 
17. 🔄 Why would you need a dynamic block in Terraform? 
18. 🔍 What is the difference between a dynamic block and an output block in Terraform? 
19. 🌍 How many environments are you managing? 
20. ⚙️ Does each environment have its own Kubernetes cluster? 
21. 🖥️ How many nodes are attached to your Kubernetes clusters? 
22. 📊 What are the specifications for each node in your Kubernetes clusters? 
23. 📦 How many pods are currently running in your clusters? 
24. 🗂️ Are pods running on specific nodes? 
25. ❓ If not, why is the system still referred to as a cluster? 
26. 🔌 What types of services are you using in Kubernetes? 
27. 🌍 From your understanding, are services in Kubernetes exposed to the outside world? 
28.🚪 Have you used an Ingress controller in your projects? 
29. 📄 When you write YAML files for Kubernetes, do you specify the kind as `Pod`, `ReplicaSet`, or `Deployment`? 
30. 🔀 Why would you use `kind: Pod`, `kind: ReplicaSet`, and `kind: Deployment` in separate YAML files? Isn’t it possible to achieve the same with just `kind: Deployment`? 
31. ⚖️ Why are Kubernetes resources like `Pod`, `ReplicaSet`, and `Deployment` defined separately, even though a `Deployment` can manage both Pods and ReplicaSets? 
32. 💼 What is your reason for seeking a change in your current role? 
33. ❓ Do you have any questions for me?
================================================================================================================
𝗔 𝗰𝗼𝗺𝗺𝗼𝗻 𝗶𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄 𝗾𝘂𝗲𝘀𝘁𝗶𝗼𝗻 𝗻𝗼𝘄𝗮𝗱𝗮𝘆𝘀 𝗶𝘀 𝗵𝗼𝘄 𝘆𝗼𝘂 𝘄𝗼𝘂𝗹𝗱 𝗿𝗲𝗱𝘂𝗰𝗲 𝗔𝗪𝗦 𝗿𝗲𝘀𝗼𝘂𝗿𝗰𝗲 𝗰𝗼𝘀𝘁𝘀.🌟

🌐One effective strategy to achieve significant savings is by using AWS VPC Gateway Endpoints. When implemented correctly, they can help 𝗿𝗲𝗱𝘂𝗰𝗲 𝗱𝗮𝘁𝗮 𝘁𝗿𝗮𝗻𝘀𝗳𝗲𝗿 𝗰𝗼𝘀𝘁𝘀 𝗯𝘆 𝘂𝗽 𝘁𝗼 𝟵𝟲%)


📌Leveraging AWS VPC Gateway Endpoints can reduce costs by up to 96% by providing private, secure connectivity between your VPC and supported AWS services, eliminating the need for costly NAT Gateways. 

🧩In high-traffic scenarios, VPC Endpoints offer a more efficient and cost-effective solution, ensuring data stays within the AWS network. By prioritizing private connectivity, you not only save on costs but also enhance security by avoiding the internet, with VPC Gateway and Interface Endpoints enabling direct, private connections within AWS.


𝗪𝗵𝗮𝘁 𝗶𝘀 𝗶𝘁 ?

A private tunnel between your AWS VPC and specific AWS services, bypassing the public internet.

𝗪𝗵𝘆 𝗶𝘀 𝗶𝘁 𝗶𝗺𝗽𝗼𝗿𝘁𝗮𝗻𝘁 ?

𝐒𝐞𝐜𝐮𝐫𝐢𝐭𝐲 : Reduced exposure to threats.

𝐏𝐞𝐫𝐟𝐨𝐫𝐦𝐚𝐧𝐜𝐞 : Lower latency, better performance.

𝐂𝐨𝐬𝐭 𝐒𝐚𝐯𝐢𝐧𝐠𝐬 :Significant reduction in data transfer costs.

𝗛𝗼𝘄 𝗱𝗼𝗲𝘀 𝗶𝘁 𝘄𝗼𝗿𝗸 ?

1. Create an endpoint for the desired service (e.g., S3, DynamoDB).
2. Configure routing in your VPC.
3. Your resources can now communicate privately with the service.

VPC Gateway Endpoints provide a secure, efficient, and cost-effective way to connect your VPC to AWS services.
================================================================================================================
AWS:
1.What are the components in ECS?
2.how to connect lambda function to the outside of the world?
3.How many lambda functions can execute through single account?
4.scenario: Application is in public subnet and database is in private subnet, So how the data can send or receive from the private subnet to the application?
5.What are API gateways?

Terraform:
1.Resources already exist in the cloud, so how to configure it with terraform?

Docker
1.What are the custom images in docker?
2.Difference b/w CMD,RUN and Entry point
3.Difference b/w Add and Copy
4.What are targets in Docker-Compose

Kubernetes:

1.how many microservices have you worked on?
2.How do microservices communicate with each other?
3.What types of network policies are used in pods for security?
4.How do you handle sensitive data used in microservices, and how is it retrieved when required?
5.Scenario: If I access one of the microservices via xyz.com, it should display on the system. What configurations and settings are needed to achieve this, including for path-based routing?
6.What is pod affinity?
7.What is the difference between a Deployment and a Stateful-Sets?
8.Why do we use Stateful-Sets for database applications rather than Deployments?
9.How the Pod will assign to the node.
=========================================================================================
1. What is ALB & NLB?
2. How do you configure ALB?
3. What is Elastic Beanstalk?
4. What is ECS?
5. Explain RDS.
6. What is a NAT Gateway? Explain how to configure it.
7. Explain the difference between NACL and SG.
8. What is a Statefile in Terraform?
9. What is Terraform Graph?
10. Write Terraform code for an EC2 instance.
11. How will you recover deleted infrastructure in Terraform?
12. What is Terraform State Locking?
13. Where do you store Terraform secrets?
14. What is Sentinel?
15. What is Terragrunt?
16. What is the difference between stateful and stateless in K8s?
17. What are Kubernetes services, and can you explain each?
18. Explain Kubernetes architecture.
19. What are resource requests and limits in Kubernetes?
20. What is a Dockerfile?
21. What is the difference between COPY and ADD?
22. What is the difference between RUN, CMD, and ENTRYPOINT?
23. What do you know about Ansible?
24. What is Ansible Tower?
25. Write an Ansible Playbook.
26. What is Ansible Galaxy?
27. Explain the Jenkins Master and Slave architecture.
28. Write a Jenkinsfile for a Java-based application.
29. How do you secure Jenkins?
=========================================================================================================
1. What scripting languages are you familiar with?

2. What are artifacts in GitLab CI?

3. What is a private module registry in Terraform?

4. If you delete the local Terraform state file and it's not stored in S3 or DynamoDB, how can you recover it?

5. How do you import resources into Terraform?

6. What is a dynamic block in Terraform?

7. How can you create EC2 instances in two different AWS accounts simultaneously using Terraform?

8. How do you handle an error stating that the resource already exists when creating resources with Terraform?

9. How does Terraform refresh work?

10. How would you upgrade Terraform plugins?

11. What are the different types of Kubernetes volumes?

12. If a pod is in a crash loop, what might be the reasons, and how can you recover it?

13. What is the difference between StatefulSet and DaemonSet?

14. What is a sidecar container in Kubernetes, and what are its use cases?

15. If pods fail to start during a rolling update, what strategy would you use to identify the issue and rollback?

16. How can we enable communication between 500 AWS accounts internally?

17. How to configure a solution where a Lambda function triggers on an S3 upload and updates DynamoDB?

18. What is the standard port for RDP?

19. How do you configure a Windows EC2 
instance to join an Active Directory domain?

20. How can you copy files from a Linux server to an S3 bucket?

21. What permissions do you need to grant for that S3 bucket?

22. What are the different types of VPC endpoints and when do you use them?

23. How to resolve an image pullback error when using an Alpine image pushed to ECR in a pipeline?

24. What is the maximum size of an S3 object?

25. What encryption options do we have in S3?

26. Can you explain IAM user, IAM role, and IAM group in AWS?

27. What is the difference between an IAM role and an IAM policy document?

28. What are inline policies and managed policies?

29. How can we add a load balancer to Route 53?

30. What are A records and CNAME records?

31. What is the use of a target group in a load balancer?

32. If a target group is unhealthy, what might be the reasons?

33. Can you share your screen and write a Jenkins pipeline?

34. How do you write parallel jobs in a Jenkins pipeline?
====================================================================================================================
1. How would you access an S3 bucket from an EC2 instance using Private IP? 
Ans - VPC Endpoint
2. What is ALB vs NLB?
3. How a auto scaling group knows to scale-in or scale-out the instance size?
4. What automation you did in your last project you worked on? 
5. How did you start/stop EC2 instances over weekend using AWS Lambda?
6. What is Pre-signed url in S3? 
7. How did you troubleshoot EC2 instances connectivity or networking issue?
8. Explain need of Multi-AZ RDS deployment?
9. How API gateway route traffic to backend EC2 instance who serves spring boot application? 
10. Difference between CloudFront vs AWS Global accelerator?
11. How to connect 2 VPC's together? If your answer is VPC Peering then
12. How did you connect 3 or more VPC's together?
 Ans - Transit gateway
===============================================================================================================
1. **Scenario:** You've just deployed a new version of an application to production, but shortly after deployment, users are reporting issues with slow response times. What steps would you take to troubleshoot and resolve this issue?

**Question:** Can you walk me through your troubleshooting process in this scenario, including the tools you would use and the specific checks you would perform?

**Answer:** First, I would check the application logs and performance metrics to identify any anomalies or errors. Then, I would use monitoring tools like Prometheus or Datadog to analyze system performance and resource utilization. Next, I would inspect the network traffic using tools like Wireshark to identify any bottlenecks. Additionally, I would examine the infrastructure configuration to ensure it aligns with best practices. Finally, I would collaborate with developers to pinpoint any code changes that might be causing the slowdown and implement necessary fixes.

2. **Scenario:** A critical security vulnerability has been identified in one of the software components used in your infrastructure. How would you handle this situation?

**Question:** Describe your approach to patching and updating software components in your infrastructure to address security vulnerabilities while minimizing downtime and impact on ongoing operations.

**Answer:** Firstly, I would verify the severity and impact of the vulnerability by consulting relevant security advisories and resources. Then, I would prioritize patching based on the criticality of the vulnerability and the potential risk to the organization. To minimize downtime, I would schedule patching during off-peak hours and utilize techniques like blue-green deployments or canary releases. Additionally, I would automate the patching process using configuration management tools like Ansible or Puppet to ensure consistency and efficiency across the infrastructure.

3. **Scenario:** Your team is working on a project that requires seamless integration and deployment of code across multiple environments, including development, testing, staging, and production. How would you design and implement a CI/CD pipeline for this project?

**Question:** Can you outline the key components of the CI/CD pipeline you would design for this project, including the tools you would use and the specific stages in the pipeline?

**Answer:** For this project, I would design a CI/CD pipeline consisting of several stages, including source code management, automated testing, deployment to development, testing, and staging environments, and finally, production deployment. I would use tools like GitLab CI/CD or Jenkins for pipeline orchestration, Docker for containerization, and Kubernetes for orchestration.
==================================================================================================================
 A 𝗰𝗼𝗺𝗺𝗼𝗻 𝗾𝘂𝗲𝘀𝘁𝗶𝗼𝗻 𝗶𝗻 𝗶𝗻𝘁𝗲𝗿𝘃𝗶𝗲𝘄𝘀 nowadays is explaining how you implemented a 𝗺𝘂𝗹𝘁𝗶-𝗯𝗿𝗮𝗻𝗰𝗵 𝗽𝗶𝗽𝗲𝗹𝗶𝗻𝗲 and 𝗺𝗶𝗰𝗿𝗼𝘀𝗲𝗿𝘃𝗶𝗰𝗲𝘀 in your project 🌟

🔍Here’s a 𝗰𝗵𝗮𝗹𝗹𝗲𝗻𝗴𝗶𝗻𝗴 𝗽𝗿𝗼𝗷𝗲𝗰𝘁 explaining the above involving the 𝗱𝗲𝗽𝗹𝗼𝘆𝗺𝗲𝗻𝘁 of a 𝟭𝟬-𝗺𝗶𝗰𝗿𝗼𝘀𝗲𝗿𝘃𝗶𝗰𝗲𝘀 𝗮𝗽𝗽𝗹𝗶𝗰𝗮𝘁𝗶𝗼𝗻 on an 𝗘𝗞𝗦 𝗰𝗹𝘂𝘀𝘁𝗲𝗿 using 𝗧𝗲𝗿𝗿𝗮𝗳𝗼𝗿𝗺, automated through a 𝗺𝘂𝗹𝘁𝗶-𝗯𝗿𝗮𝗻𝗰𝗵 𝗖𝗜/𝗖𝗗 𝗽𝗶𝗽𝗲𝗹𝗶𝗻𝗲🔍


📌 𝗛𝗲𝗿𝗲'𝘀 𝗮 𝗾𝘂𝗶𝗰𝗸 𝗼𝘃𝗲𝗿𝘃𝗶𝗲𝘄 𝗼𝗳 𝘁𝗵𝗲 𝗸𝗲𝘆 𝗮𝘀𝗽𝗲𝗰𝘁𝘀 𝗼𝗳 𝘁𝗵𝗶𝘀 𝗱𝗲𝗽𝗹𝗼𝘆𝗺𝗲𝗻𝘁:

-----𝗠𝗶𝗰𝗿𝗼𝘀𝗲𝗿𝘃𝗶𝗰𝗲𝘀 𝗜𝗺𝗽𝗹𝗲𝗺𝗲𝗻𝘁𝗲𝗱-----
📢 Ad Service: Manages advertisements and promotions displayed on the website.
🛒 Cart Service: Handles user shopping carts, including adding, removing, and updating items.
✅ Checkout Service: Manages the checkout process, including order summaries and confirmations.
💱 Currency Service: Provides currency conversion and pricing in different currencies.
📧 Email Service: Sends order confirmations, promotions, and notifications to users.
💻 Frontend Service: Manages the website’s user interface and overall user experience.
🌐 External Frontend (Load Balancer): Distributes traffic across multiple frontend instances to ensure high availability and performance.
💳 Payment Service: Securely processes payments and transactions.
📦 Product Catalogue Service: Manages product listings, inventory, and product details.
🔍 Recommendation Service: Suggests relevant products based on users’ browsing and purchase history.
🚚 Shipping Service: Manages the shipping process, tracking deliveries, and handling logistics to ensure timely order fulfillment.

🔑 𝗧𝗲𝗰𝗵 𝗦𝘁𝗮𝗰𝗸 𝘂𝘀𝗲𝗱:

↗️ 𝐓𝐞𝐫𝐫𝐚𝐟𝐨𝐫𝐦: To automate infrastructure provisioning, ensuring a consistent and reliable setup.
↗️ 𝗝𝗲𝗻𝗸𝗶𝗻𝘀 𝗖𝗜/𝗖𝗗 𝗣𝗶𝗽𝗲𝗹𝗶𝗻𝗲 to automate the build, test, and deployment processes, improving development efficiency and reducing manual intervention.
↗️ 𝗗𝗼𝗰𝗸𝗲𝗿 𝗛𝘂𝗯 integration to containerize and push all services for seamless deployment into the Kubernetes cluster.
↗️ 𝗞𝘂𝗯𝗲𝗿𝗻𝗲𝘁𝗲𝘀 (𝗔𝗺𝗮𝘇𝗼𝗻 𝗘𝗞𝗦) for orchestration, ensuring robust scaling, fault tolerance, and service discovery.
↗️ 𝗥𝗼𝗹𝗲-𝗯𝗮𝘀𝗲𝗱 Authentication and 𝗦𝗲𝗿𝘃𝗶𝗰𝗲 𝗔𝗰𝗰𝗼𝘂𝗻𝘁 Binding to secure communication between microservices and the Kubernetes cluster.
↗️ 𝗟𝗼𝗮𝗱 𝗕𝗮𝗹𝗮𝗻𝗰𝗲𝗿 integration to ensure reliable external access to the front end, with traffic automatically distributed across the services.
↗️ 𝗔𝗪𝗦 𝗥𝗢𝗨𝗧𝗘 𝟱𝟯 facilitated DNS management for user-friendly access to applications.

🔗🔗 𝗖𝗼𝗺𝗽𝗹𝗲𝘁𝗲 𝗣𝗿𝗼𝗷𝗲𝗰𝘁 𝘄𝗶𝘁𝗵 𝗦𝘁𝗲𝗽𝘀:
https://lnkd.in/dq-3DWet
=====================================================================================================
 My Recent Interview Experience: 𝗣𝗿𝗼𝗱𝘂𝗰𝘁 𝗕𝗮𝘀𝗲𝗱 𝗖𝗼𝗺𝗽𝗮𝗻𝘆
- 𝗗𝗲𝘃𝗢𝗽𝘀 𝗥𝗼𝗹𝗲
 𝗘𝘅𝗽 𝗥𝗮𝗻𝗴𝗲: 𝟯-𝟱 𝘆𝗿𝘀

𝗚𝗲𝗻𝗲𝗿𝗮𝗹 𝗤𝘂𝗲𝘀𝘁𝗶𝗼𝗻𝘀
What is DevOps, and how does it differ from traditional IT practices?
Category: Technical
What are the key benefits of implementing DevOps in an organization?
Category: Technical
Can you describe the DevOps lifecycle?
Category: Technical
Explain the "CI/CD pipeline." How does it improve software delivery?
Category: Technical
What is Infrastructure as Code (IaC), and why is it important?
Category: Technical
 

𝗧𝗼𝗼𝗹𝘀 𝗮𝗻𝗱 𝗧𝗲𝗰𝗵𝗻𝗼𝗹𝗼𝗴𝗶𝗲𝘀:
What tools have you used for configuration management? Why?
Category: Technical
How do you manage version control in DevOps?
Category: Technical
Explain the differences between Ansible, Puppet, and Chef.
Category: Technical
Which containerization platforms have you worked with? 
Category: Technical
How do you monitor systems in a DevOps environment? What tools do you recommend?
Category: Technical
 

𝗖𝗜/𝗖𝗗:
What tools have you used for CI/CD, and how do they fit into the pipeline?
Category: Technical
How do you handle failures during deployments?
Category: Situational
Explain blue-green deployments and canary deployments.
Category: Technical
What are some challenges with automating CI/CD, and how do you address them?
Category: Situational
 

𝗖𝗹𝗼𝘂𝗱 𝗮𝗻𝗱 𝗜𝗻𝗳𝗿𝗮𝘀𝘁𝗿𝘂𝗰𝘁𝘂𝗿𝗲:
What cloud platforms have you worked with (AWS, Azure, GCP)?
Category: Technical
Explain the differences between scaling horizontally and vertically.
Category: Technical
How do you ensure high availability in a distributed system?
Category: Technical
What is the role of load balancers in a cloud architecture?
Category: Technical
 

𝗔𝘂𝘁𝗼𝗺𝗮𝘁𝗶𝗼𝗻 𝗮𝗻𝗱 𝗦𝗰𝗿𝗶𝗽𝘁𝗶𝗻𝗴
What scripting languages do you use, and for what purpose in DevOps?
Category: Technical
How do you automate infrastructure provisioning?
Category: Technical
Can you explain how you troubleshoot failed scripts or pipelines?
Category: Situational
 

𝗠𝗼𝗻𝗶𝘁𝗼𝗿𝗶𝗻𝗴 𝗮𝗻𝗱 𝗦𝗲𝗰𝘂𝗿𝗶𝘁𝘆
What monitoring tools have you used? How do you decide which metrics to monitor?
Category: Technical
How do you ensure the security of your CI/CD pipelines?
Category: Technical
What is your approach to handling secrets and credentials in automation scripts?
Category: Technical
 

𝗣𝗿𝗼𝗯𝗹𝗲𝗺-𝗦𝗼𝗹𝘃𝗶𝗻𝗴 𝗮𝗻𝗱 𝗦𝗰𝗲𝗻𝗮𝗿𝗶𝗼𝘀
Tell me about a challenging project you worked on in DevOps. How did you handle it?
Category: Behavioral
Describe a time when a production system failed. What steps did you take to resolve it?
Category: Behavioral
How would you approach onboarding a new team to a DevOps culture?
 

𝗦𝗼𝗳𝘁 𝗦𝗸𝗶𝗹𝗹𝘀
How do you handle conflicts between development and operations teams?
How do you keep yourself updated with the latest DevOps trends and technologies?
What do you think is the most critical aspect of collaboration in a DevOps team?
=================================================================================================
Here are 𝐦𝐮𝐬𝐭 𝐤𝐧𝐨𝐰𝐧 𝐜𝐨𝐦𝐦𝐚𝐧𝐝𝐬 𝐢𝐧 𝐓𝐞𝐫𝐫𝐚𝐟𝐨𝐫𝐦 that you should be aware of for any 2-4 yrs exp 𝐃𝐞𝐯𝐎𝐩𝐬 𝐈𝐧𝐭𝐞𝐫𝐯𝐢𝐞𝐰𝐬:

hashtag#Repost🔃 if found useful

✅𝗧𝗲𝗿𝗿𝗮𝗳𝗼𝗿𝗺 𝗰𝗼𝗺𝗺𝗮𝗻𝗱𝘀

1. terraform init:
- Initializes a working directory containing Terraform configuration files.

2. terraform plan:
- Generates an execution plan, outlining actions Terraform will take.

3. terraform apply:
- Applies the changes described in the Terraform configuration.

4. terraform destroy:
- Destroys all resources described in the Terraform configuration.

5. terraform validate:
- Checks the syntax and validity of Terraform configuration files.

6. terraform refresh:
- Updates the state file against real resources in the provider.

7. terraform output:
- Displays the output values from the Terraform state.

8. terraform state list:
- Lists resources within the Terraform state.

9. terraform show:
- Displays a human -readable output of the current state or a specific resource’s state.

10. terraform import:
- Imports existing infrastructure into Terraform state.

11. terraform fmt:
- Rewrites Terraform configuration files to a canonical format.

12. terraform graph:
- Generates a visual representation of the Terraform dependency graph.

13. terraform providers:
- Prints a tree of the providers used in the configuration.

14. terraform workspace list:
- Lists available workspaces.

15. terraform workspace select:
- Switches to another existing workspace.

16. terraform workspace new:
- Creates a new workspace.

17. terraform workspace delete:
- Deletes an existing workspace.

18. terraform output:
- Retrieves output values from a module.

19. terraform state mv:
- Moves an item in the state.

20. terraform state pull:
- Pulls the state from a remote backend.

21. terraform state push:
- Pushes the state to a remote backend.

22. terraform state rm:
- Removes items from the state.

23. terraform taint:
- Manually marks a resource for recreation.

24. terraform untaint:
- Removes the ‘tainted’ state from a resource.

25. terraform login:
- Saves credentials for Terraform Cloud.

26. terraform logout:
- Removes credentials for Terraform Cloud.

27. terraform force -unlock:
- Releases a locked state.

28. terraform import:
- Imports existing infrastructure into your Terraform state.

29. terraform plan -out:
- Saves the generated plan to a file.

30. terraform apply -auto -approve:
- Automatically applies changes without requiring approval.

31. terraform apply -target=resource:
- Applies changes only to a specific resource.

32. terraform destroy -target=resource:
- Destroys a specific resource.

33. terraform apply -var=”key=value”:
- Sets a variable’s value directly in the command line.

34. terraform apply -var -file=filename.tfvars:
- Specifies a file containing variable definitions.

35. terraform apply -var -file=filename.auto.tfvars:
- Automatically loads variables from a file.
==================================================================================================
1.     How do you define and measure SLIs, SLOs, and SLAs in your organization?
2.     Tell me a scenario where you had to resize EBS storage without downtime.
3.     How do you configure cross-region VPC Peering? What challenges might arise?
4.     What is the difference between Security Groups and Network ACLs? Provide a use-case for each.
5.     How do you handle updates to a production environment using CloudFormation without downtime?
6.     What are the differences between AWS CloudFront and a traditional reverse proxy server?
7.     How would you implement blue-green deployments or canary releases in a CI/CD pipeline?
8.     If your build process frequently fails due to flaky tests, how would you address this?
9.     What are the differences between Deployments, StatefulSets, and DaemonSets, and how would you choose one over another?
10.  Describe how you would debug a CrashLoopBackOff state in a Kubernetes pod.
11.  How do you implement a readiness probe and a liveness probe? Why are both important?
12.  How would you implement node affinity to ensure pods are scheduled on specific nodes?
13.  What are the benefits of using a multi-stage Docker build? Provide a real-world example.
14.  How do you configure a Docker container to ensure it adheres to the principle of least privilege?
15.  Explain how you would debug a Docker container that keeps restarting.
16.  How do you decide between using an Application Load Balancer (ALB), Network Load Balancer (NLB), and Gateway Load Balancer (GWLB) for a particular application?
17.  How do you permanently open a specific port on a Linux machine?
18.  Explain the use case for htop vs top in Linux.
19.  How do you manage rollbacks in CloudFormation during stack updates?
=========================================================================================================
🧩 𝐂𝐨𝐫𝐞 𝐂𝐨𝐦𝐩𝐨𝐧𝐞𝐧𝐭𝐬 𝐨𝐟 𝐊𝐮𝐛𝐞𝐫𝐧𝐞𝐭𝐞𝐬 𝐀𝐫𝐜𝐡𝐢𝐭𝐞𝐜𝐭𝐮𝐫𝐞:

1️⃣ 𝐂𝐨𝐧𝐭𝐫𝐨𝐥 𝐏𝐥𝐚𝐧𝐞 – The Brain of Kubernetes 🧠
𝐀𝐏𝐈 𝐒𝐞𝐫𝐯𝐞𝐫: The gateway for cluster operations.
𝐒𝐜𝐡𝐞𝐝𝐮𝐥𝐞𝐫: Decides where each Pod runs, optimizing resources.
𝐂𝐨𝐧𝐭𝐫𝐨𝐥𝐥𝐞𝐫 𝐌𝐚𝐧𝐚𝐠𝐞𝐫: Maintains the cluster’s desired state.
𝐞𝐭𝐜𝐝: The memory, storing all cluster data.

2️⃣ 𝐖𝐨𝐫𝐤𝐞𝐫 𝐍𝐨𝐝𝐞𝐬 – The Muscles of Kubernetes 💪
𝐊𝐮𝐛𝐞𝐥𝐞𝐭: Ensures Pods stay active and healthy.
𝐊𝐮𝐛𝐞-𝐏𝐫𝐨𝐱𝐲: Manages networking, enabling service communication.
𝐂𝐨𝐧𝐭𝐚𝐢𝐧𝐞𝐫 𝐑𝐮𝐧𝐭𝐢𝐦𝐞: Brings applications to life within containers.

3️⃣ 𝐏𝐨𝐝𝐬 & 𝐒𝐞𝐫𝐯𝐢𝐜𝐞𝐬 – Where Apps Live 📦🔗
𝐏𝐨𝐝𝐬: The smallest unit, housing containers.
𝐒𝐞𝐫𝐯𝐢𝐜𝐞𝐬: Stabilize connections between microservices and users.

4️⃣ 𝐍𝐞𝐭𝐰𝐨𝐫𝐤𝐢𝐧𝐠 & 𝐒𝐭𝐨𝐫𝐚𝐠𝐞 🌐💾
Kubernetes uses a flat network to enable communication across Pods.
Persistent Volumes ensure data is maintained across lifecycles.

🔍 𝐖𝐡𝐲 𝐊𝐮𝐛𝐞𝐫𝐧𝐞𝐭𝐞𝐬 𝐀𝐫𝐜𝐡𝐢𝐭𝐞𝐜𝐭𝐮𝐫𝐞 𝐌𝐚𝐭𝐭𝐞𝐫𝐬
𝐒𝐜𝐚𝐥𝐚𝐛𝐢𝐥𝐢𝐭𝐲: Dynamically adjusts to demand, ensuring resilience.
𝐅𝐥𝐞𝐱𝐢𝐛𝐢𝐥𝐢𝐭𝐲: Cloud-agnostic; deployable across on-premises, AWS, GCP, or Azure.
𝐑𝐞𝐬𝐢𝐥𝐢𝐞𝐧𝐜𝐞: Built-in health checks, automated rollouts, and self-healing.
=====================================================================================
1.     How would you handle a situation where a deployment script fails mid-way? What rollback mechanisms would you implement?
2.     Explain the difference between a blue-green deployment and a canary deployment. When would you use each?
3.     What are some common challenges in CI/CD, and how have you solved them in your projects?
4.     Explain how you would troubleshoot a pipeline error in Jenkins related to dependency mismatches.
5.     How would you implement security in a CI/CD pipeline to ensure compliance and prevent vulnerabilities?
6.     What are the differences between Jenkins and GitHub Actions, and when would you choose one over the other?
7.     How would you use Ansible in a CI/CD pipeline to deploy applications to multiple environments?
8.     Explain the role of playbooks and inventory files in Ansible for deployment automation.
9.     How would you handle testing in a CI/CD pipeline to ensure changes don’t affect production?
10.  What are the considerations for setting up a continuous deployment process in a cloud environment like AWS or Azure?

Scenario based:

11.  If CPU utilization on a server is consistently above 90%, what steps would you take to investigate and address the issue?
12.  Imagine you need to migrate a high-performance computing (HPC) infrastructure to the cloud. How would you ensure a seamless transition while maintaining availability and performance?
13.  Your team is experiencing increased latency in database queries due to high traffic. What steps would you take to diagnose and reduce this latency?
14.  Suppose there’s a sudden surge in cloud costs. How would you go about identifying the cause and reducing unnecessary expenses?
15.  Tell me how you previously reduced cloud expenditure by 20%.
16.  You’ve been asked to design a logging and monitoring solution for a new application. What factors would you consider, and how would you prioritize them?
17.  Imagine you are responsible for managing SSL/TLS certificates across multiple environments. How would you ensure they’re up to date and compliant with security standards?
==========================================================================================
1. 🔧 Explain how Linux mechanisms work, especially when the system starts.
2. 🐳 What happens when you run a container in Kubernetes? Explain the internal workings.
3. 🔀 What is the difference between git merge and git rebase?
4. 🎯 Why and when would you use the git cherry-pick command?
5. ⚙️ Key differences between Jenkins Declarative Pipeline and Scripted Pipeline?
6. 🌐 What is DNS and how does it work?
7. 🛣️ Explain how routes work in a network environment.
8. 🛡️ How do you implement network policies in Kubernetes?
9. 📊 How do Prometheus and Grafana interact? What is the source of data for Prometheus?
10. 🗄️ Which database did you use in your recent project, and why?
11. 🧠 What is an SQL index, and how does it work?
12. 🔍 Can you share a situation where you faced a challenge working with a non-technical team, and how you solved it?
13.👫 Would you describe yourself as a communicator or a problem-solver?
14. 🏅 Tell me about a situation where you took on a leadership role.
15. 🛠️ What values do you consider important when working with a team?
16. ⚽ What are your hobbies outside of technical work?
17. 📦 Why did you choose Docker in your recent project?
==========================================================================================
1. Write a shell script to find and delete all files in a directory that are older than 30 days.

2. Create a script to monitor the disk usage of a server. If usage exceeds 80%, log the details to a file and send an alert email.

3. Write a script that renames all .txt files in a directory by appending the current date to the filename.

4. Create a script that checks if a particular service (e.g., httpd or nginx) is running. If not, it should restart the service and log the action.

5. Write a script to monitor CPU and memory usage every minute and log the details if CPU usage is above 90% or memory usage exceeds 75%.

6. Write a script that performs a backup of a specified directory and compresses it with the current date in the filename. Schedule it to run daily using cron.

7. Create a script to check the availability of a list of websites. For each site, if it's unreachable, log the URL and send an alert.

8. Write a Python script using boto3 to list all S3 buckets in an AWS account and their respective sizes.

9. Develop a script that starts and stops EC2 instances based on a schedule (e.g., start at 8 AM and stop at 8 PM).

10. Create a script that monitors a specified directory and automatically deletes any files larger than 100 MB.
=============================================================================================================
1. Day to day 𝗮𝗰𝘁𝗶𝘃𝗶𝘁𝗶𝗲𝘀 in DevOps Cloud. 
2. How effective did you used 𝗞𝘂𝗯𝗲𝗿𝗻𝗲𝘁𝗲𝘀 and 𝗗𝗼𝗰𝗸𝗲𝗿 in day to day activity. 
3. What happens when you run a container in Kubernetes? Explain the internal workings. 
4. Can you explain the 𝘀𝗲𝗰𝘂𝗿𝗶𝘁𝘆 𝗳𝗲𝗮𝘁𝘂𝗿𝗲𝘀 which is available in 𝗞𝘂𝗯𝗲𝗿𝗻𝗲𝘁𝗲𝘀. 
5. Can you explain the 𝗰𝗼𝗺𝗽𝗼𝗻𝗲𝗻𝘁𝘀 of 𝗞𝘂𝗯𝗲𝗿𝗻𝗲𝘁𝗲𝘀. 
6. Are you aware of the 𝗲𝘅𝗶𝘁 𝗰𝗼𝗱𝗲. 
7. There is an existing 𝗽𝗼𝗱 which is 𝗻𝗼𝘁 getting 𝘀𝗰𝗵𝗲𝗱𝘂𝗹𝗲𝗱. How will you fix this issue. 
8. You have the exposure to 𝗶𝗻𝗰𝗶𝗱𝗲𝗻𝘁 𝗺𝗮𝗻𝗮𝗴𝗲𝗺𝗲𝗻𝘁 right? How will you 𝗰𝗮𝘁𝗲𝗴𝗼𝗿𝗶𝘇𝗲 the 𝗽𝗿𝗶𝗼𝗿𝗶𝘁𝘆 
9. How do Prometheus and Grafana interact? What is the source of data for Prometheus?. 
10. Explain how Linux mechanisms work, especially when the system starts.. 
11. How can we enable communication between 500 AWS accounts internally?
12. Difference between 𝗜𝗥 and 𝗦𝗥 
13. What about the 𝗺𝗼𝗻𝗶𝘁𝗼𝗿𝗶𝗻𝗴 part. Do you have any exposure to that? 
14. What are the things you will do with respect to the 𝗺𝗼𝗻𝗶𝘁𝗼𝗿𝗶𝗻𝗴? 
15. Define 𝗹𝗼𝗴𝘀 and 𝗺𝗲𝘁𝗿𝗶𝗰𝘀 
16. So let's consider, in your 𝗱𝗮𝘀𝗵𝗯𝗼𝗮𝗿𝗱, you observed from one application or one 𝗰𝗹𝘂𝘀𝘁𝗲𝗿 the 𝘂𝘁𝗶𝗹𝗶𝘇𝗮𝘁𝗶𝗼𝗻 was 𝗵𝗶𝗴𝗵. Which were you can identify using the 𝗱𝗮𝘀𝗵𝗯𝗼𝗮𝗿𝗱 with the 𝗺𝗲𝘁𝗿𝗶𝗰𝘀 which is already created. So what will be the first step and how will you 𝗳𝗶𝘅 the 𝗶𝘀𝘀𝘂𝗲. 
17. Do you have any experience in 𝗰𝗿𝗲𝗮𝘁𝗶𝗻𝗴 the 𝗺𝗼𝗻𝗶𝘁𝗼𝗿𝘀? 
18. What is a sidecar container in Kubernetes, and what are its use cases?
19. Do you have any exposure to 𝗜𝗔𝗖 tools like 𝗧𝗲𝗿𝗿𝗮𝗳𝗼𝗿𝗺? 
20. Write some sample 𝗗𝗼𝗰𝗸𝗲𝗿𝗳𝗶𝗹𝗲 to create an 𝗡𝗴𝗶𝗻𝘅 𝗶𝗺𝗮𝗴𝗲 
21. What do you know about 𝘁𝗲𝘀𝘁𝗶𝗻𝗴?
=================================================================================================
1. How do you handle Kubernetes upgrades without causing downtime in production?

2. Explain the Kubernetes architecture and its components.

3. How to set up a Kubernetes pod with multiple containers, giving one container full S3 access and another container IAM access.

4. What is the difference between Docker Swarm and Kubernetes?

5. How will you reduce the Docker image size?

6. Will data on the container be lost when the Docker container exits.

7. What is a Kubernetes Deployment, and how does it differ from a ReplicaSet?

8. Can you explain the concept of self-healing in Kubernetes and provide examples of how it works?

9. How does Kubernetes handle network communication between containers?

10. What is the difference between DaemonSet and StatefulSet?

11. How does a NodePort service work?

12. What strategies would you use to manage secrets in Kubernetes.

13. Can you discuss the implications of running privileged containers and how to mitigate the risks?

14. How would you approach monitoring and logging in a Kubernetes environment

15. How can horizontal pod autoscaling be implemented in Kubernetes? Provide an example.

16. How do you ensure compliance in a DevSecOps pipeline. 

17. What are service meshes, and how do they enhance microservices architecture?

18. Describe a scenario where you would use admission controllers in Kubernetes.

𝗖𝗜/𝗖𝗗 𝗮𝗻𝗱 𝗗𝗲𝘃𝗢𝗽𝘀 𝗣𝗿𝗮𝗰𝘁𝗶𝗰𝗲 :

19. What's the minimum requirement to set up CI/CD pipelines in Azure DevOps using a GitHub source code repository.

20. How do you manage environment-specific configurations in a CI/CD pipeline.

21. How does Jenkins faster collaboration between development and operations teams, and how do you handle conflicts?

22. Explain the blue-green deployment, canary deployment, and rollback processes with real-time scenarios.

23. What are the advantages and disadvantages of using feature flags in CI/CD?

𝗖𝗹𝗼𝘂𝗱 𝗮𝗻𝗱 𝗜𝗻𝗳𝗿𝗮𝘀𝘁𝗿𝘂𝗰𝘁𝘂𝗿𝗲:

24. What is meant by geolocation-based routing and latency-based routing, and which AWS service helps in configuring such routing policies? Explain a scenario.

25. What are some best practices for organizing Terraform configurations to ensure they are modular and reusable

26. Explain the Git branching strategy and how it supports collaboration in software development.

27. How would you implement security controls in a CI/CD pipeline.

28. vulnerabilities found during security scans in a continuous delivery pipeline

29. What security considerations do you take into account when u
=================================================================================================================
1. What is Kubernetes, and why is it used?
2. Explain the components of the Kubernetes master and worker nodes.
3. What are Pods in Kubernetes?
4. What is the difference between a Pod and a Node?
5. What is a Namespace, and why is it used?
6. How does Kubernetes handle Pod failures?
7. What are the different types of workloads in Kubernetes?
8. How does a Deployment work?
9. What is a StatefulSet, and when would you use it?
10. Explain DaemonSets and provide a use case for them.
11. What is the difference between ReplicationController, ReplicaSet, and Deployment?
12. What is a Service in Kubernetes, and what are the different types?
13. How does Kubernetes manage internal and external networking?
14. What is a ClusterIP, NodePort, and LoadBalancer Service?
15. Explain Ingress in Kubernetes and its use case.
16. How does DNS work within a Kubernetes cluster?
17. What are Persistent Volumes (PVs) and Persistent Volume Claims (PVCs)?
18. Explain the process of binding a PV to a PVC.
19. What is a StorageClass, and how does it relate to dynamic provisioning?
20. How are ConfigMaps used in Kubernetes?
21. What is the difference between ConfigMaps and Secrets?
22. How can you securely manage secrets in Kubernetes?
23. How do you scale Pods in Kubernetes?
24. What is the Horizontal Pod Autoscaler (HPA), and how does it work?
25. How does Cluster Autoscaler differ from HPA?
26. What is Role-Based Access Control (RBAC) in Kubernetes?
27. Explain the difference between Role and ClusterRole.
28. What is a ServiceAccount, and why would you use it?
29. How can you implement network policies for Pod communication?
30. How do you monitor Kubernetes clusters?
31. What tools would you use to monitor and log Kubernetes applications?
32. What is node affinity?
33. What is StaticPods?
34. What is Taint and Toleration?
35. What is Sidecar Containers and their purpose?
36. How to debug specific container logs?Consider there are 2 containers running inside a single pod?
37. What are the different deployment strategies in Kubernetes?
38. Describe the process of rolling update in Kubernetes?
======================================================================================================
💡 Scenario: A critical service has stopped on a production server. How would you troubleshoot and restart the service? 

- Check the service status: Use systemctl status <service_name> to determine the current state of the service (active, inactive, or failed). 
- Check logs: Look at the logs for clues. Use journalctl -u <service_name> to view logs related to the specific service or /var/log/syslog for system-wide logs. This will help you find any critical errors or warnings.
- Restart the service: To bring the service back online, use systemctl restart <service_name>. This command attempts to restart the service, and if it fails again, you may need to look deeper into configuration or resource issues.
- Check resource usage: Run top or htop to inspect CPU and memory usage. If the server is running out of resources, it may be causing the service to crash.
- Check disk space: Use df -h to see if the disk is full. Services often fail if there’s no free space for logs or operations.
- Validate service configuration: Inspect the service’s configuration file (for example, Nginx has /etc/nginx/nginx.conf) to ensure that settings are correct and haven’t been corrupted.


💡 Scenario: You need to give non-root users access to a directory but with restricted permissions. How would you achieve this?

- Change directory ownership: Use chown : to assign the ownership of the directory to a specific user and group. This ensures only the intended user/group has control over the directory.
- Set permissions: Apply chmod to assign specific access levels. For example, chmod 750 gives the owner full permissions, the group read and execute, and others no access.
- Advanced permission control: For more granular access control, use setfacl. With setfacl -m u::rwx , you can provide specific permissions to multiple users without affecting group permissions.


💡 Scenario: A script scheduled via cron has stopped running. How would you troubleshoot it? 

- List cron jobs: Run crontab -l (for user-specific cron jobs) or check /etc/crontab for system-wide jobs. Ensure the cron job hasn’t been accidentally removed or modified.
- Check cron logs: Use grep CRON /var/log/syslog (on Debian-based systems) or /var/log/cron (on RedHat-based systems) to look for errors in cron’s execution.
- Ensure script is executable: Verify that the script has execute permissions using chmod +x
- Environment differences: Cron operates in a limited environment, so ensure all necessary environment variables are defined within the script or cron job.
- Test manually: Run the script manually in the terminal to confirm whether the issue is with the cron job or the script itself.
===============================================================================================================
1. Day to day 𝗮𝗰𝘁𝗶𝘃𝗶𝘁𝗶𝗲𝘀 in DevOps Cloud. 
2. How effective did you used 𝗞𝘂𝗯𝗲𝗿𝗻𝗲𝘁𝗲𝘀 and 𝗗𝗼𝗰𝗸𝗲𝗿 in day to day activity. 
3. What happens when you run a container in Kubernetes? Explain the internal workings. 
4. Can you explain the 𝘀𝗲𝗰𝘂𝗿𝗶𝘁𝘆 𝗳𝗲𝗮𝘁𝘂𝗿𝗲𝘀 which is available in 𝗞𝘂𝗯𝗲𝗿𝗻𝗲𝘁𝗲𝘀. 
5. Can you explain the 𝗰𝗼𝗺𝗽𝗼𝗻𝗲𝗻𝘁𝘀 of 𝗞𝘂𝗯𝗲𝗿𝗻𝗲𝘁𝗲𝘀. 
6. Are you aware of the 𝗲𝘅𝗶𝘁 𝗰𝗼𝗱𝗲. 
7. There is an existing 𝗽𝗼𝗱 which is 𝗻𝗼𝘁 getting 𝘀𝗰𝗵𝗲𝗱𝘂𝗹𝗲𝗱. How will you fix this issue. 
8. You have the exposure to 𝗶𝗻𝗰𝗶𝗱𝗲𝗻𝘁 𝗺𝗮𝗻𝗮𝗴𝗲𝗺𝗲𝗻𝘁 right? How will you 𝗰𝗮𝘁𝗲𝗴𝗼𝗿𝗶𝘇𝗲 the 𝗽𝗿𝗶𝗼𝗿𝗶𝘁𝘆 
9. How do Prometheus and Grafana interact? What is the source of data for Prometheus?. 
10. Explain how Linux mechanisms work, especially when the system starts.. 
11. How can we enable communication between 500 AWS accounts internally?
12. Difference between 𝗜𝗥 and 𝗦𝗥 
13. What about the 𝗺𝗼𝗻𝗶𝘁𝗼𝗿𝗶𝗻𝗴 part. Do you have any exposure to that? 
14. What are the things you will do with respect to the 𝗺𝗼𝗻𝗶𝘁𝗼𝗿𝗶𝗻𝗴? 
15. Define 𝗹𝗼𝗴𝘀 and 𝗺𝗲𝘁𝗿𝗶𝗰𝘀 
16. So let's consider, in your 𝗱𝗮𝘀𝗵𝗯𝗼𝗮𝗿𝗱, you observed from one application or one 𝗰𝗹𝘂𝘀𝘁𝗲𝗿 the 𝘂𝘁𝗶𝗹𝗶𝘇𝗮𝘁𝗶𝗼𝗻 was 𝗵𝗶𝗴𝗵. Which were you can identify using the 𝗱𝗮𝘀𝗵𝗯𝗼𝗮𝗿𝗱 with the 𝗺𝗲𝘁𝗿𝗶𝗰𝘀 which is already created. So what will be the first step and how will you 𝗳𝗶𝘅 the 𝗶𝘀𝘀𝘂𝗲. 
17. Do you have any experience in 𝗰𝗿𝗲𝗮𝘁𝗶𝗻𝗴 the 𝗺𝗼𝗻𝗶𝘁𝗼𝗿𝘀? 
18. What is a sidecar container in Kubernetes, and what are its use cases?
19. Do you have any exposure to 𝗜𝗔𝗖 tools like 𝗧𝗲𝗿𝗿𝗮𝗳𝗼𝗿𝗺? 
20. Write some sample 𝗗𝗼𝗰𝗸𝗲𝗿𝗳𝗶𝗹𝗲 to create an 𝗡𝗴𝗶𝗻𝘅 𝗶𝗺𝗮𝗴𝗲 
21. What do you know about 𝘁𝗲𝘀𝘁𝗶𝗻𝗴
================================================================================================================
1. **Scenario:** You've just deployed a new version of an application to production, but shortly after deployment, users are reporting issues with slow response times. What steps would you take to troubleshoot and resolve this issue?

**Question:** Can you walk me through your troubleshooting process in this scenario, including the tools you would use and the specific checks you would perform?

**Answer:** First, I would check the application logs and performance metrics to identify any anomalies or errors. Then, I would use monitoring tools like Prometheus or Datadog to analyze system performance and resource utilization. Next, I would inspect the network traffic using tools like Wireshark to identify any bottlenecks. Additionally, I would examine the infrastructure configuration to ensure it aligns with best practices. Finally, I would collaborate with developers to pinpoint any code changes that might be causing the slowdown and implement necessary fixes.

2. **Scenario:** A critical security vulnerability has been identified in one of the software components used in your infrastructure. How would you handle this situation?

**Question:** Describe your approach to patching and updating software components in your infrastructure to address security vulnerabilities while minimizing downtime and impact on ongoing operations.

**Answer:** Firstly, I would verify the severity and impact of the vulnerability by consulting relevant security advisories and resources. Then, I would prioritize patching based on the criticality of the vulnerability and the potential risk to the organization. To minimize downtime, I would schedule patching during off-peak hours and utilize techniques like blue-green deployments or canary releases. Additionally, I would automate the patching process using configuration management tools like Ansible or Puppet to ensure consistency and efficiency across the infrastructure.

3. **Scenario:** Your team is working on a project that requires seamless integration and deployment of code across multiple environments, including development, testing, staging, and production. How would you design and implement a CI/CD pipeline for this project?

**Question:** Can you outline the key components of the CI/CD pipeline you would design for this project, including the tools you would use and the specific stages in the pipeline?

**Answer:** For this project, I would design a CI/CD pipeline consisting of several stages, including source code management, automated testing, deployment to development, testing, and staging environments, and finally, production deployment. I would use tools like GitLab CI/CD or Jenkins for pipeline orchestration, Docker for containerization, and Kubernetes for orchestration.
=========================================================================================================================
1. Scenario: Your application experiences sudden traffic spikes, causing latency issues.

Question: How would you design an auto-scaling solution using AWS services? What parameters would you configure in Auto Scaling Groups?

2. Scenario: You are required to deploy a microservice-based architecture with managed Kubernetes.

Question: How would you set up and scale an EKS cluster in a production environment? How do you manage high availability and security of workloads?

3. Scenario: Your API backend is hosted on EC2 and the team needs a more cost-effective way to handle occasional traffic bursts.

Question: How would you migrate your API to serverless architecture using AWS?
---
Storage & Databases:
4. Scenario: A team is experiencing slow read performance on an RDS database during peak hours.

Question: How would you optimize the performance of RDS to handle read-heavy workloads?

5. Scenario: You need to build a disaster recovery solution with minimal downtime and cost.

Question: How would you implement a cross-region backup strategy for S3 and RDS?

6. Scenario: Your application needs to store user session data for high availability with sub-millisecond latency.

Question: Which AWS services would you use to store and retrieve session data? Why?
---
Security & Identity Management:
7. Scenario: The security team found that some EC2 instances are publicly accessible.

Question: How would you identify and fix the issue while ensuring this doesn’t happen again?

8. Scenario: Your organization wants to manage access to AWS resources using roles rather than users.

Question: How would you set up IAM roles for cross-account access in AWS?

9. Scenario: A critical Lambda function is accessing sensitive data stored in RDS.

Question: How would you manage secure access to RDS without hardcoding credentials?
---
Monitoring & Logging:
10. Scenario: A production environment is experiencing intermittent outages, and the root cause is unclear.

Question: How would you monitor and troubleshoot the issue using AWS services?

11. Scenario: You want to monitor the health and performance of multiple microservices in your environment.

Question: Which tools and techniques would you use to ensure observability?
---
Cost Optimization & Governance:

12. Scenario: Your AWS bill has increased unexpectedly over the past three months.

Question: How would you analyze and reduce the AWS costs? What services would you leverage?

13. Scenario: You need to ensure developers follow best practices and don’t create costly resources unnecessarily.

Question: How would you enforce governance and compliance policies across multiple accounts?
=================================================================================================
1. Explain how Linux mechanisms work, especially when the system starts.
2. What happens when you run a container in Kubernetes? Explain the internal workings.
3. What is the difference between git merge and git rebase?
4. Why and when would you use the git cherry-pick command?
5. Key differences between Jenkins Declarative Pipeline and Scripted Pipeline?
6. What is DNS and how does it work?
7. Explain how routes work in a network environment.
8. How do you implement network policies in Kubernetes?
9. How do Prometheus and Grafana interact? What is the source of data for Prometheus?
10. Which database did you use in your recent project, and why?
11. What is an SQL index, and how does it work?
12. Can you share a situation where you faced a challenge working with a non-technical team, and how you solved it?
13. Would you describe yourself as a communicator or a problem-solver?
14. Tell me about a situation where you took on a leadership role.
15. What values do you consider important when working with a team?
16. What are your hobbies outside of technical work?
17. Why did you choose Docker in your recent project?
=================================================================================================
1. What scripting languages are you familiar with?
2. What are artifacts in GitLab CI?
3. What is a private module registry in Terraform?
4. If you delete the local Terraform state file and it's not stored in S3 or DynamoDB, how can you recover it?
5. How do you import resources into Terraform?
6. What is a dynamic block in Terraform?
7. How can you create EC2 instances in two different AWS accounts simultaneously using Terraform?
8. How do you handle an error stating that the resource already exists when creating resources with Terraform?
9. How does Terraform refresh work?
10. How would you upgrade Terraform plugins?
11. What are the different types of Kubernetes volumes?
12. If a pod is in a crash loop, what might be the reasons, and how can you recover it?
13. What is the difference between StatefulSet and DaemonSet?
14. What is a sidecar container in Kubernetes, and what are its use cases?
15. If pods fail to start during a rolling update, what strategy would you use to identify the issue and rollback?
16. How can we enable communication between 500 AWS accounts internally?
17. How to configure a solution where a Lambda function triggers on an S3 upload and updates DynamoDB?
18. What is the standard port for RDP?
19. How do you configure a Windows EC2 instance to join an Active Directory domain?
20. How can you copy files from a Linux server to an S3 bucket?
21. What permissions do you need to grant for that S3 bucket?
22. What are the different types of VPC endpoints and when do you use them?
23. How to resolve an image pullback error when using an Alpine image pushed to ECR in a pipeline?
24. What is the maximum size of an S3 object?
25. What encryption options do we have in S3?
26. Can you explain IAM user, IAM role, and IAM group in AWS?
27. What is the difference between an IAM role and an IAM policy document?
28. What are inline policies and managed policies?
29. How can we add a load balancer to Route 53?
30. What are A records and CNAME records?
31. What is the use of a target group in a load balancer?
32. If a target group is unhealthy, what might be the reasons?
33. Can you share your screen and write a Jenkins pipeline?
34. How do you write parallel jobs in a Jenkins pipeline?
=================================================================================================
1. How do you handle Kubernetes upgrades without causing downtime in production?

* Explain the Kubernetes architecture and its components.

2. How to set up a Kubernetes pod with multiple containers, giving one container full S3 access and another container IAM access.

3. What is the difference between Docker Swarm and Kubernetes?
4. How will you reduce the Docker image size?
5. Will data on the container be lost when the Docker container exits.

6. What is a Kubernetes Deployment, and how does it differ from a ReplicaSet?
Can you explain the concept of self-healing in Kubernetes and provide examples of how it works?
7. How does Kubernetes handle network communication between containers?
What is the difference between DaemonSet and StatefulSet?
8. How does a NodePort service work?

* What strategies would you use to manage secrets in Kubernetes.

* Can you discuss the implications of running privileged containers and how to mitigate the risks?
* How would you approach monitoring and logging in a Kubernetes environment

* How can horizontal pod autoscaling be implemented in Kubernetes? Provide an example.

* How do you ensure compliance in a DevSecOps pipeline. 

* What are service meshes, and how do they enhance microservices architecture?
Describe a scenario where you would use admission controllers in Kubernetes.

CI/CD and DevOps Practice :

9.What's the minimum requirement to set up CI/CD pipelines in Azure DevOps using a GitHub source code repository.

10. How do you manage environment-specific configurations in a CI/CD pipeline.

11.How does Jenkins faster collaboration between development and operations teams, and how do you handle conflicts?

12.Explain the blue-green deployment, canary deployment, and rollback processes with real-time scenarios.
13.What are the advantages and disadvantages of using feature flags in CI/CD

Cloud and Infrastructure:

14.What is meant by geolocation-based routing and latency-based routing, and which AWS service helps in configuring such routing policies? Explain a scenario.

15.What are some best practices for organizing Terraform configurations to ensure they are modular and reusable

16.Explain the Git branching strategy and how it supports collaboration in software development.

17.How would you implement security controls in a CI/CD pipeline.

18. vulnerabilities found during security scans in a continuous delivery pipeline

19. What security considerations do you take into account when using Infrastructure as Code (IaC)How do you secure your IaC templates
=========================================================================================================================
1. What is the command for checking the CPU usage and memory, monitoring system performance in real time, command to check system hidden files.
2. What are the commands you use in your industry daily for Linux.
3. What is the script you write for taking backup.
4. What is the use of below command: Stash, Rebase,Cherrypic.
5. What is the difference between git pull and git fetch.
6. How you commit code in Git.
7. When do we use Grep and Awk
8. How do you resolve Git conflict.
9. What is Docker Registry.
10. How image of Docker is formed.
11. Why Docker is there if K8s is taking over the place.
12. What is Docker Multistage?
13. What is docker Volume?
14. What is command to remove Unused Docker Volumes.
15. EntryPoint and CMD- What do you know about it.
16. Add and Copy Difference.
17. Docker Exec and Docker attach difference
==========================================================================================================
1. Explain the orchestration of kubernetes...?
2. What is the difference between state less and state full applications..?
3. What is the difference between Deployment and Statefulset and explain with example..?
4. What is PVC and how you are using this component in your current organization..?
5. How you can configure the ebs volume to a pod..?
6. Write a sample HPA (Horizantal pod Autoscaler) file..?
7. How do you configure Argocd for deployment purpose in k8s..?
8. Default ports of prometheus and grafana..?
9. Explain Network policies in k8s..?
10. Write a sample jenkins declarative pipeline..?
11. What is the use of jenkins file..?
12. Tell me some jenkins plugins and use cases..?
13. How do you handle user authentication in jenkins..?
14. Explain the terraform commands that can be used to deploying a module ..?
15. What is the use of backend file in terraform..?
16. what is state file..?
17. what is the difference between .tf and state file..?
18. what is sonarlint..?
19. What are common errors that you are seeing in the kubernetes pods..?
20. What is the source for prometheus..?
21. Which database types are using the opensearch and grafana..?
22. Difference between daemonset and statefulset..?
===========================================================================================================
1.What is the difference between git fetch and git merge?
2.Consider a scenario that in your local system you have cloned a repository and you have done the changes and as soon as you trying to push the changes it is saying that your username and email is not correct so how do you fix this issue?
3. There is something known as head in git can you explain me what is exactly head?
4.Could you explain the usage of git head?
5.What is git reset?
6.Consider a scenario u have to uncommit the last three commits without losing the changes what do you do?
7.Let's say I have command git diff head till day three what does supposed to mean?
8.Whenever you work with a lot of people even if you are a dev tester or a Devops you must have faced like merge conflict or something so could you explain what is exactly git conflict and why does it occur?
9.What git status do ?
10.Many time when we do git status it is something is known as untracked what is that suppose to be untracked?
11.What are the branching strategies you folks use in your system?
12.What is the difference between git and GitHub?
13.Have you come across git rebase and can you explain me a situation a real time scenario which you have used git rebase? 
14.Consider the scenario how would you recover any branch that is already pushed changes to the central repository for example you have pushed the branch to the central repository but somehow you deleted it from every members local laptops how can you recover it ??
15.Have you Heard about the concept of reference logs or reflogs?
16.Can you explain me what you have done in Ansible then it would be great?
17.When we say that Ansible is a configuration management tool what do we actually mean?
18.What do you understand by Ansible tasks?
19.Ansible is pull based or push based?
20.What is the difference between pull based and pull based?
21.Let's consider a scenario if I have one master and 100 agents and I have to change the password of the user in all of these 100 agents how will you do it?
22. How do you know that it is installed in every vm or an agent how can we show?
23.What do you understand by Ansible module?
24. Is there something known as custom modules or extra modules?What is it?
25.What is the basic purpose of cloud front why do we use?
26.If I want to get higher performance in our application by using cloud front so what are the techniques that is used by cloud front to get higher performance for the application?
27.Have you Heard about regional edge cache ?
28.When should I use farget and when should I use ec2?
29.What kind of CI CD you folks use? I want to know whatever you are doing whatever you are building could you explain it in step by step?
30.What do you understand by data sources in Terraform?
======================================================================================
1. Where you used ansible in your project.
2. Which versions of ansible did you worked till now.
3. What modules you used in ansible.
4. Write a playbook to copy a file from a src to dest and in another task in same playbook email the file you copied.
5. Write a playbook using lineinfile module to insert two data entries hostname and ip to a csv file. It has to be like, 1st row hostname and 2nd row ip.
6. Write a playbook to get the disk usage of filesystem and write result to a file if usage is more than 70%.
7. What is a handler, where you use it. Include in one of the playbooks you wrote earlier.
8. What are tags and why they are used. Include in one of the playbooks you wrote earlier.
9. What is an adhoc command and why it is used.
10. What is ansible galaxy. What are the roles you have used from galaxy in your project.
11. Write the role directory structure.
12. What kind of errors you faced while working with ansible in your projects.
13. How you will resolve conflicts that arise with different teams.
14. Do you follow agile process. What are the different aspects that occur in an Agile process.
15. What are best practices to write ansible playbooks.
16. Have you worked on ansible tower.
17. Have you ever worked on core networking areas like configuring switches, routers etc.
===========================================================================================================
General Cloud Computing Concepts
What is cloud computing?
Explain the different types of cloud computing services.
IaaS (Infrastructure as a Service)
PaaS (Platform as a Service)
SaaS (Software as a Service)
What are the advantages of cloud computing?

AWS Basics
What is AWS?
Explain the difference between AWS regions and availability zones.
What are some of the most commonly used AWS services?
How do you manage AWS services?
AWS Management Console
AWS CLI (Command Line Interface)
AWS SDKs

Compute Services
What is Amazon EC2?
Explain the different types of EC2 instances.
What is auto-scaling and how does it work?
What is Elastic Load Balancing (ELB)?

Storage Services
What is Amazon S3?
Explain the difference between S3 storage classes.
What is Amazon EBS (Elastic Block Store)?
What is Amazon Glacier?

Database Services
What is Amazon RDS?
What is DynamoDB?
What is Amazon Redshift?

Networking
What is Amazon VPC?
Explain the purpose of subnets in a VPC.
What are security groups and network ACLs?
What is Route 53?

Security
What is IAM (Identity and Access Management)?
How do you secure data in transit and at rest in AWS?
What is AWS KMS (Key Management Service)?

DevOps and Automation
What is AWS CloudFormation?
What is AWS Elastic Beanstalk?
What is AWS CodePipeline?
Monitoring and Management
What is Amazon CloudWatch?
What is AWS CloudTrail?
How do you use AWS Config?

Cost Management
How do you estimate costs in AWS?
What is the AWS Free Tier?
What are Reserved Instances and how do they differ from On-Demand instances?

Advanced Topics
Explain the concept of serverless computing and AWS Lambda.
What is Amazon ECS (Elastic Container Service) and EKS (Elastic Kubernetes Service)?
What is AWS Fargate?

Practical Questions
How would you set up a highly available and scalable web application on AWS?
Describe a scenario where you had to troubleshoot an AWS service issue.

Behavioral Questions
Describe a challenging AWS project you worked on.
How do you keep up with the latest AWS updates and features?
How do you handle failure in a cloud environment?
===========================================================================================
1. Build Failure in Jenkins Pipeline 💡
 - Scenario: A Jenkins job frequently fails during the build phase.
 - Question: How would you approach troubleshooting the build failure?

2. Deployment Fails Due to Environment Mismatch💡
 - Scenario: A deployment to a staging environment works, but it fails in production.
 - Question: How do you identify and fix the issue?

3. Pipeline Hangs at a Certain Step💡
 - Scenario: A CI/CD pipeline hangs or times out at a particular step.
 - Question: How do you go about diagnosing the issue?

4. Flaky Test Failures in Pipeline💡
 - Scenario: Tests are sometimes passing and sometimes failing in the pipeline, with no code changes.
 - Question: How would you handle flaky tests?

5. Permission Denied Errors💡
 - Scenario: The pipeline fails due to permission denied errors during deployment.
 - Question: How do you troubleshoot permission errors in the CI/CD pipeline?

6. Slow Performance of CI/CD Pipeline💡
 - Scenario: The CI/CD pipeline is running much slower than expected.
 - Question: What are the steps to optimize and troubleshoot slow performance?

7. Artifact Deployment Fails Due to Version Conflict💡
 - Scenario: A deployment fails due to version conflicts in dependencies.
 - Question: How would you approach troubleshooting a dependency version conflict in the pipeline?

8. Security Vulnerabilities Found During Pipeline Execution💡
 - Scenario: A security scanning tool in the pipeline identifies vulnerabilities.
 - Question: How would you handle vulnerabilities detected in the pipeline?

9. Failed Rollback During Deployment💡
 - Scenario: A rollback operation fails after a deployment issue.
 - Question: How do you handle a failed rollback during deployment?

10. Docker Image Fails to Build💡
 - Scenario: The pipeline fails at the Docker build step.
 - Question: How would you troubleshoot a Docker image build failure?

11. Service Not Accessible After Deployment💡
 - Scenario: A service is not accessible after deployment even though it is running.
 - Question: How do you troubleshoot this issue?

12. Failed Integration Between CI/CD Tools💡
 - Scenario: The CI/CD pipeline is integrated with tools like Git, Jira, and Slack, but integrations are failing.
 - Question: How do you identify the root cause of the integration failure?
============================================================================================
1tell me something about yourself 
2. what is your day to day activity in your last company can u tell me please 
3. Can u explain ci cd process of your project 
4.what is maven why we use it 
5. what is the diffrence between contineous delivery contineous deployment 
6. what do you understand by data sources in terraform 
7. How to export data from one module to other in terraform 
8.when you find dependencies in terraform file how do we do it does it have own mechanisam for this management 
9. what is external datablock in terraform 
10. lets have scenario you use terraform cloud or something multiple people are working in terraform and they every workspace have own state file how can two people using the same thing diffrent set of infrastructure in the same working directory how to people work on that 
11. what is the diffrence between git fetch and git merge please tell me 
12. how to create a master slave architecture in jenkins 
13. when we create a node its ask about executers so if you have information about executers 
14. can u explain me the deploy process of dockerized app that is stored in git repo 
15 . How can u optimized ec2 instance what are some startegies for reducing cost while mainatining 
docker vs vm
===================
𝟭. 𝗛𝗼𝘄 𝗱𝗼 𝘆𝗼𝘂 𝗿𝗲𝘀𝗼𝗹𝘃𝗲 𝗮 𝗺𝗲𝗿𝗴𝗲 𝗰𝗼𝗻𝗳𝗹𝗶𝗰𝘁 𝗶𝗻 𝗚𝗶𝘁?
Answer: Identify the Conflict: When you attempt to merge branches, Git will indicate which files have conflicts.
Open each conflicted file. You will see conflict markers (<<<<<<<, =======, >>>>>>>) indicating the conflicting changes.
Manually resolve the conflicts by choosing which changes to keep or merging them. Remove the conflict markers once resolved.

𝟮. 𝗛𝗼𝘄 𝗱𝗼 𝘆𝗼𝘂 𝗿𝗲𝘃𝗲𝗿𝘁 𝗮 𝗰𝗼𝗺𝗺𝗶𝘁 𝘁𝗵𝗮𝘁 𝗵𝗮𝘀 𝗮𝗹𝗿𝗲𝗮𝗱𝘆 𝗯𝗲𝗲𝗻 𝗽𝘂𝘀𝗵𝗲𝗱 𝘁𝗼 𝗮 𝗿𝗲𝗺𝗼𝘁𝗲 𝗿𝗲𝗽𝗼𝘀𝗶𝘁𝗼𝗿𝘆?
Answer: To revert a pushed commit, use the git revert command. This creates a new commit that undoes the changes made by the specified commit. 
Revert the Commit: git log && git revert <commit-hash>
Push the Changes: git push origin <branch-name>

𝟯. 𝗛𝗼𝘄 𝗱𝗼 𝘆𝗼𝘂 𝗰𝗵𝗲𝗿𝗿𝘆-𝗽𝗶𝗰𝗸 𝗮 𝗰𝗼𝗺𝗺𝗶𝘁 𝗳𝗿𝗼𝗺 𝗼𝗻𝗲 𝗯𝗿𝗮𝗻𝗰𝗵 𝘁𝗼 𝗮𝗻𝗼𝘁𝗵𝗲𝗿?
Answer: Cherry-picking allows you to apply the changes from a specific commit in another branch.
Cherry-Pick the Commit: git cherry-pick <commit-hash>

𝟰. 𝗛𝗼𝘄 𝗱𝗼 𝘆𝗼𝘂 𝗰𝗿𝗲𝗮𝘁𝗲 𝗮 𝗻𝗲𝘄 𝗯𝗿𝗮𝗻𝗰𝗵 𝗮𝗻𝗱 𝘀𝘄𝗶𝘁𝗰𝗵 𝘁𝗼 𝗶𝘁 𝗶𝗻 𝗼𝗻𝗲 𝗰𝗼𝗺𝗺𝗮𝗻𝗱?Answer: You can create a new branch and switch to it using the -b flag with the git checkout command:
git checkout -b new-branch-name This command creates a new branch called new-branch-name and checks it out immediately.

𝟱. 𝗛𝗼𝘄 𝗱𝗼 𝘆𝗼𝘂 𝘃𝗶𝗲𝘄 𝘁𝗵𝗲 𝗰𝗵𝗮𝗻𝗴𝗲𝘀 𝘁𝗵𝗮𝘁 𝗵𝗮𝘃𝗲 𝗯𝗲𝗲𝗻 𝗺𝗮𝗱𝗲 𝘀𝗶𝗻𝗰𝗲 𝘁𝗵𝗲 𝗹𝗮𝘀𝘁 𝗰𝗼𝗺𝗺𝗶𝘁?
Answer: To see changes made since the last commit, you can use: git diff
This command shows the unstaged changes. If you want to see both staged and unstaged changes, you can use: git diff HEAD

𝟲. 𝗛𝗼𝘄 𝗰𝗮𝗻 𝘆𝗼𝘂 𝘀𝗲𝗲 𝘁𝗵𝗲 𝗰𝗼𝗺𝗺𝗶𝘁 𝗵𝗶𝘀𝘁𝗼𝗿𝘆 𝗶𝗻 𝗮 𝗺𝗼𝗿𝗲 𝗿𝗲𝗮𝗱𝗮𝗯𝗹𝗲 𝗳𝗼𝗿𝗺𝗮𝘁?
Ans: You can use the --oneline option with git log for a concise view: git log --oneline --graph --decorate

𝟳. 𝗛𝗼𝘄 𝗱𝗼 𝘆𝗼𝘂 𝘀𝘁𝗮𝗴𝗲 𝗼𝗻𝗹𝘆 𝘀𝗽𝗲𝗰𝗶𝗳𝗶𝗰 𝗳𝗶𝗹𝗲𝘀 𝗳𝗼𝗿 𝗮 𝗰𝗼𝗺𝗺𝗶𝘁?
Ans: You can stage specific files by specifying their names when using git add: git add file1.txt file2.txt

𝟴. 𝗛𝗼𝘄 𝗱𝗼 𝘆𝗼𝘂 𝗿𝗲𝘀𝗲𝘁 𝘆𝗼𝘂𝗿 𝗹𝗼𝗰𝗮𝗹 𝗯𝗿𝗮𝗻𝗰𝗵 𝘁𝗼 𝗺𝗮𝘁𝗰𝗵 𝗮 𝗿𝗲𝗺𝗼𝘁𝗲 𝗯𝗿𝗮𝗻𝗰𝗵?
Ans: To reset your local branch to match the remote branch, use the git reset command with the --hard option. This will discard any local changes:
Fetch the Latest Changes: git fetch origin
Reset to Remote Branch: git reset --hard origin/<branch-name>

𝟵. 𝗛𝗼𝘄 𝗰𝗮𝗻 𝘆𝗼𝘂 𝗹𝗶𝘀𝘁 𝗮𝗹𝗹 𝗯𝗿𝗮𝗻𝗰𝗵𝗲𝘀 𝗶𝗻 𝘆𝗼𝘂𝗿 𝗿𝗲𝗽𝗼𝘀𝗶𝘁𝗼𝗿𝘆 𝗮𝗻𝗱 𝗵𝗶𝗴𝗵𝗹𝗶𝗴𝗵𝘁 𝘁𝗵𝗲 𝗰𝘂𝗿𝗿𝗲𝗻𝘁 𝗯𝗿𝗮𝗻𝗰𝗵?
Ans: To list all branches and highlight the current branch, use: git branch
The current branch will be highlighted with an asterisk (*) next to its name.
=======================================================
1. Can you explain how EC2, S3, and VPC work and how they integrate into a DevOps pipeline?

2. How would you design a CI/CD pipeline using AWS services like CodePipeline, CodeBuild, and CodeDeploy?

3. What are the benefits of using AWS CloudFormation or Terraform for IaC, and can you walk me through a sample deployment?

4. How do you incorporate security into your DevOps pipeline using AWS services?

5. How do you monitor and troubleshoot applications in AWS? What tools do you use?

6. Can you explain how you've used Docker and Kubernetes in conjunction with AWS services like ECS or EKS?

7. How would you configure Auto Scaling and Elastic Load Balancing (ELB) in AWS to handle traffic spikes?

8. How do you ensure disaster recovery and high availability in an AWS environment?

9. What strategies do you use to manage and optimize costs in AWS?

10. Describe a challenging problem you solved using DevOps practices in AWS. What was the outcome?

=============================================================================
only linux 

1.     How can you list all running processes on a Linux system?
2.     What is the difference between grep and awk?
3.     How to change permissions of a file to 755 in Linux?
4.     You need to find all files larger than 500MB under the /var/log directory. What command will you use?
5.     A specific service has stopped responding. How will you find its process ID and kill it safely without affecting other processes?
6.     How to identify the processes consuming the most CPU or memory?
7.     How to check the free disk space on a Linux machine? If a particular partition (e.g., /var) is 95% full, what steps will you take to resolve it?
8.     You suspect a service failure occurred last night. How to search for all error messages in the logs from yesterday using a single command?
9.     A user reports they cannot execute a script named deploy.sh. What steps will you take to fix permissions so only the user and the group can execute it?
10.  Explain the output of ls -l and how file permission bits work.
11.  You are asked to schedule a script to run every day at 3:00 AM. How to set up a cron job for this task?
12.  You need to find all .log files modified in the last 7 days and archive them into a single .tar.gz file. What commands would you use?
13.  A developer accidentally deleted an important file. You don’t have a backup, but you suspect it is still open in a running process. How to recover the file?
===============================================================
1. You are tasked with securing a Linux server that hosts a web application. The server is currently exposed to the internet and has a weak root password. Describe the steps you would take to secure the server.
2. One of your team members accidentally ran a command that corrupted the file system on a critical Linux server. The server is no longer booting, and you need to recover the data. Walk me through the steps you would take to recover the file system.
3. Your team uses a backup script to download the latest backup file from a remote server. However, the script is currently not working due to changes in the remote server's configuration. Write a script that downloads the latest backup file from the remote server using SSH.
4. You are using Terraform to manage your infrastructure, and you notice that one of your resources is not being updated correctly. Describe how you would use Terraform's taint and untaint commands to resolve the issue. Additionally, explain the difference between stateful and stateless resources in Terraform.
5. Your team is using Jenkins for continuous integration and continuous deployment (CI/CD). Describe the master-slave architecture of Jenkins and how it enables distributed builds and deployments.
6. You are tasked with implementing a CI/CD pipeline from scratch for a web application. Describe the steps you would take to implement the pipeline, including how you would ensure zero downtime deployments and implement rollbacks.
7.Explain the concept of shift-left in DevOps and how it enables teams to detect and fix issues earlier in the development cycle.
8.What is the difference between the ADD and COPY instructions in a Dockerfile?
9.You accidentally committed sensitive information to a Git repository. Describe the steps you would take to remove the sensitive information from the repository's history.
10.One of your team members accidentally deleted a critical branch in a Git repository. Describe the steps you would take to recover the deleted branch.
11. Explain the difference between the origin and upstream remotes in a Git repository.
12. Describe the lifecycle of a Docker container, including how it is created, started, stopped, and deleted.
13. Explain the concept of a ReplicaSet in Kubernetes and how it ensures that a specified number of replicas of a pod are running at any given time
14. Describe how to configure a NAT gateway in AWS to enable outbound internet access for instances in a private subnet.
15. What happens when you delete the /var/lib/docker/overlay directory on a Docker host
16. Is it possible to run a virtual machine (VM) in AWS without creating an EC2 instance? If so, how
17. Explain the difference between stopping and terminating an EC2 instance. Additionally, describe the concept of EC2 hibernation and how it enables instances to be restarted from a saved state.
================================================================================================
1. You are tasked with upgrading your Kubernetes cluster to a newer version.
What challenges might you face during a cluster upgrade?
How would you plan and execute a seamless upgrade without impacting running applications?

2. Your organization requires stricter security controls for pod deployments.
How would you enforce pod security policies to restrict permissions, such as root access or privileged containers?
What alternatives to PSPs would you consider since they are deprecated?

3. You need to monitor application performance and resource usage in your cluster.Which tools would you use to monitor Kubernetes clusters effectively?
How would you implement monitoring for resource usage, application logs, and network traffic?

4. A critical application is deployed on your Kubernetes cluster, and you are required to implement disaster recovery. How would you design a backup and recovery solution for the application and cluster?
What tools or strategies would you use to back up etcd, persistent data, and application configurations?

5.You need to perform maintenance on a node in your cluster, but it runs critical application pods. How would you drain the node without causing downtime for the applications? What would you do if some pods fail to evict during the drain?

6. You have applications running in two separate Kubernetes clusters, and they need to communicate securely. How would you establish secure communication between applications across clusters? What tools or practices would you use for cross-cluster networking?

7. Your team demands zero downtime during deployments.
How would you configure your deployment strategy to achieve zero downtime?
Compare and contrast the use of RollingUpdate and Blue/Green Deployments.

8. You need to expose an application securely over HTTPS using an ingress controller.How would you configure an ingress resource with SSL termination?
What considerations would you make for managing SSL certificates in Kubernetes?

9. You have been asked to review the security posture of your Kubernetes cluster.What steps would you take to harden the cluster?
How would you ensure RBAC policies, network policies, and secure communication between components are implemented?

10. A pod is failing to start because it can’t pull the required container image.
How would you debug the image pull issue?What are the possible reasons for such failures, and how can you mitigate them?
